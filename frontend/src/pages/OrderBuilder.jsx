import axios from 'axios';
import React, { useState, useEffect, useContext } from 'react';
import { AuthContext } from '../context/AuthContext';

function OrderBuilder() {
  const { token } = useContext(AuthContext);
  const [orderName, setOrderName] = useState('');
  const [mainQuantity, setMainQuantity] = useState(1);
  const [items, setItems] = useState([]);
  const [newItem, setNewItem] = useState({ name: '', quantity: 1, type: 'set' });
  const [savedTemplates, setSavedTemplates] = useState([]);

  useEffect(() => {
    const fetchTemplates = async () => {
      try {
        const res = await axios.get('http://127.0.0.1:5000/api/templates', {
          headers: { Authorization: `Bearer ${token}` }
        });
        setSavedTemplates(res.data);
      } catch (err) {
        console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —à–∞–±–ª–æ–Ω–∏:', err);
      }
    };

    if (token) fetchTemplates();
  }, [token]);

  const addItem = () => {
    if (!newItem.name || newItem.quantity <= 0) return;
    setItems([...items, { ...newItem }]);
    setNewItem({ name: '', quantity: 1, type: 'set' });
  };

  const updateFinalQuantity = (index, value) => {
    const updated = [...items];
    updated[index].final = parseInt(value);
    setItems(updated);
  };

  const removeItem = (index) => {
    setItems(items.filter((_, i) => i !== index));
  };

  const getComputedQuantity = (item) =>
    item.final ?? item.quantity * (item.type === 'set' ? mainQuantity : 1);

  const handleSubmit = async () => {
    const grouped = {
      set: [],
      individual: [],
    };

    items.forEach((item) => {
      const entry = {
        name: item.name,
        quantity: getComputedQuantity(item),
      };
      grouped[item.type === 'set' ? 'set' : 'individual'].push(entry);
    });

    try {
      const res = await axios.post(
        'http://127.0.0.1:5000/api/orders/submit',
        {
          orderName,
          items: [...grouped.set, ...grouped.individual]
        },
        {
          headers: {
            Authorization: `Bearer ${token}`
          }
        }
      );
      alert('üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!');
    } catch (err) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', err);
      alert('–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.');
    }
  };

  const handleSaveTemplate = async () => {
    if (!orderName || items.length === 0) {
      return alert('‚ùó –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–∞ –¥–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± 1 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç');
    }

    const payload = { name: orderName, items };

    try {
      const res = await axios.post(
        'http://127.0.0.1:5000/api/templates/upload',
        payload,
        {
          headers: {
            Authorization: `Bearer ${token}`
          }
        }
      );
      alert('‚úÖ –®–∞–±–ª–æ–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ!');
    } catch (err) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:', err);
      alert('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —à–∞–±–ª–æ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ.');
    }
  };

  const loadTemplate = (name) => {
    const selected = savedTemplates.find(t => t.name === name);
    if (selected) {
      if (!window.confirm(`–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —à–∞–±–ª–æ–Ω "${name}"? –ü–æ—Ç–æ—á–Ω—ñ –∑–º—ñ–Ω–∏ –±—É–¥–µ –≤—Ç—Ä–∞—á–µ–Ω–æ.`)) return;
      setOrderName(selected.name);
      setItems([...selected.items]);
      setMainQuantity(1);
    }
  };

  const deleteTemplate = (name) => {
    if (!window.confirm(`‚ùå –í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —à–∞–±–ª–æ–Ω "${name}"?`)) return;
    const updated = savedTemplates.filter(t => t.name !== name);
    setSavedTemplates(updated); // –ª–æ–∫–∞–ª—å–Ω–æ –æ–Ω–æ–≤–ª—é—î–º–æ (–∞–ª–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ —à–∞–±–ª–æ–Ω –∑–∞–ª–∏—à–∏—Ç—å—Å—è)
  };

  return (
    <div className="mt-5">
      <h4>üß© –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–∞–º–æ–≤–ª–µ–Ω—å</h4>

      {savedTemplates.length > 0 && (
        <div className="mb-3">
          <label className="form-label">üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —à–∞–±–ª–æ–Ω:</label>
          <div className="d-flex gap-2 flex-wrap">
            {savedTemplates.map((t, i) => (
              <div key={i} className="btn-group">
                <button className="btn btn-outline-secondary btn-sm" onClick={() => loadTemplate(t.name)}>
                  {t.name}
                </button>
                <button className="btn btn-sm btn-outline-danger" onClick={() => deleteTemplate(t.name)}>√ó</button>
              </div>
            ))}
          </div>
        </div>
      )}

      <div className="row mb-3">
        <div className="col-md-4">
          <input
            className="form-control"
            placeholder="–ù–∞–∑–≤–∞ –Ω–∞–±–æ—Ä—É (–Ω–∞–ø—Ä. –õ—ñ—Ç–∞–∫)"
            value={orderName}
            onChange={(e) => setOrderName(e.target.value)}
          />
        </div>
        <div className="col-md-2">
          <input
            type="number"
            className="form-control"
            placeholder="–ö—ñ–ª—å–∫—ñ—Å—Ç—å"
            value={mainQuantity}
            onChange={(e) => setMainQuantity(parseInt(e.target.value))}
          />
        </div>
      </div>

      <div className="row mb-3">
        <div className="col-md-4">
          <input
            className="form-control"
            placeholder="–ù–∞–∑–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É"
            value={newItem.name}
            onChange={(e) => setNewItem({ ...newItem, name: e.target.value })}
          />
        </div>
        <div className="col-md-2">
          <input
            type="number"
            className="form-control"
            placeholder="x –Ω–∞ 1 –Ω–∞–±—ñ—Ä –∞–±–æ –≤—Ä—É—á–Ω—É"
            value={newItem.quantity}
            onChange={(e) =>
              setNewItem({ ...newItem, quantity: parseInt(e.target.value) })
            }
          />
        </div>
        <div className="col-md-3">
          <select
            className="form-select"
            value={newItem.type}
            onChange={(e) => setNewItem({ ...newItem, type: e.target.value })}
          >
            <option value="set">–í —Ä–∞–º–∫–∞—Ö –Ω–∞–±–æ—Ä—É</option>
            <option value="individual">–û–∫—Ä–µ–º–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç</option>
          </select>
        </div>
        <div className="col-md-3">
          <button className="btn btn-primary w-100" onClick={addItem}>
            ‚ûï –î–æ–¥–∞—Ç–∏
          </button>
        </div>
      </div>

      <h5>üß± –ù–∞–±—ñ—Ä: <strong>{orderName || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</strong> √ó {mainQuantity}</h5>

      <table className="table">
        <thead>
          <tr>
            <th>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç</th>
            <th>–¢–∏–ø</th>
            <th>–ù–∞ 1 –Ω–∞–±—ñ—Ä</th>
            <th>–û–±—á–∏—Å–ª–µ–Ω–æ</th>
            <th>–§—ñ–Ω–∞–ª—å–Ω–æ</th>
            <th></th>
          </tr>
        </thead>
        <tbody>
          {items.map((item, i) => (
            <tr key={i}>
              <td>{item.name}</td>
              <td>{item.type === 'set' ? 'üîó –∑ –Ω–∞–±–æ—Ä—É' : 'üîß –æ–∫—Ä–µ–º–æ'}</td>
              <td>{item.quantity}</td>
              <td>{getComputedQuantity(item)}</td>
              <td>
                <input
                  type="number"
                  className="form-control"
                  value={getComputedQuantity(item)}
                  onChange={(e) => updateFinalQuantity(i, e.target.value)}
                />
              </td>
              <td>
                <button
                  className="btn btn-danger btn-sm"
                  onClick={() => removeItem(i)}
                >
                  ‚ùå
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      <button className="btn btn-success mt-3" onClick={handleSubmit}>
        üì§ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
      </button>
      <button className="btn btn-outline-dark mt-3 ms-2" onClick={handleSaveTemplate}>
        üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ —à–∞–±–ª–æ–Ω
      </button>
    </div>
  );
}

export default OrderBuilder;
